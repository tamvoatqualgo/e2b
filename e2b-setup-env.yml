AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  E2B Infrastructure CloudFormation Template - Deploys core infrastructure components for E2B platform
  including VPC, Terraform Bastion, IAM Roles, PostgreSQL Database, and S3 Buckets.

# ===================================================================================================
# Metadata - Organizes template parameters into logical groups in the CloudFormation console
# ===================================================================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: VPC Configuration
        Parameters:
          - VpcBlock
          - PublicSubnet1Block
          - PublicSubnet2Block
          - PrivateSubnet1Block
          - PrivateSubnet2Block
      - Label:
          default: Security Configuration
        Parameters:
          - AllowRemoteSSHIPs
      - Label:
          default: E2B Environment
        Parameters:
          - Environment
      - Label:
          default: Architecture Configuration
        Parameters:
          - Architecture
      - Label:
          default: Domain Configuration
      - Label:
          default: Bastion Configuration
        Parameters:
          - KeyName
      # - Label:
      #     default: Database Configuration
      #   Parameters:
      #     - DBInstanceIdentifier
      #     - DBName
      #     - DBUsername
      #     - DBPassword

# ===================================================================================================
# Parameters - Input values required for the E2B infrastructure deployment
# ===================================================================================================
Parameters:
  # Architecture Configuration - Choose CPU architecture
  Environment:
    Description: "E2B Environment"
    Type: String
    AllowedValues:
      - prod
      - dev
    Default: prod

  # Architecture Configuration - Choose CPU architecture
  Architecture:
    Description: "Choose between x86_64 (Intel/AMD compatible) and arm64 (AWS Graviton) processor architectures."
    Type: String
    AllowedValues:
      - x86_64
      - arm64

  # Domain Configuration - Settings for SSL certificate and DNS


  # VPC Configuration - Network address space for the entire infrastructure
  VpcBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR range for the VPC. Must be a valid private (RFC 1918) CIDR range with sufficient IP addresses for all components.

  # Public Subnets - Network segments with internet access for load balancers and bastion hosts
  PublicSubnet1Block:
    Type: String
    Default: 10.0.0.0/20
    Description: CIDR block for public subnet in Availability Zone 1 (provides 4,096 IP addresses for internet-facing resources)
  PublicSubnet2Block:
    Type: String
    Default: 10.0.16.0/20
    Description: CIDR block for public subnet in Availability Zone 2 (provides 4,096 IP addresses for internet-facing resources)

  # Private Subnets - Isolated network segments for databases and application servers
  PrivateSubnet1Block:
    Type: String
    Default: 10.0.32.0/20
    Description: CIDR block for private subnet in Availability Zone 1 (provides 4,096 IP addresses for internal resources)
  PrivateSubnet2Block:
    Type: String
    Default: 10.0.48.0/20
    Description: CIDR block for private subnet in Availability Zone 2 (provides 4,096 IP addresses for internal resources)

  # Bastion Configuration - Settings for the deployment and management server
  KeyName:
    Description: EC2 Key Pair name for SSH access to the bastion host (deployment server)
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair in this region.

  # Security Configuration - Access control settings
  AllowRemoteSSHIPs:
    Description: IP address range allowed for SSH (port 22) access to the bastion host (CIDR format), if you want to allow all IPs, please set it to '0.0.0.0/0'
    Type: String
    Default: "10.0.0.0/8"

  # Database Configuration - PostgreSQL settings for E2B platform
  # DBInstanceIdentifier:
  #   Type: String
  #   Default: e2b-aurora-db
  #   Description: Unique identifier for the Aurora PostgreSQL database cluster
  # DBName:
  #   Type: String
  #   Default: e2b
  #   Description: Initial database name for E2B application data (must be characters with letters and numbers)
  # DBUsername:
  #   Type: String
  #   NoEcho: true
  #   Description: Master username for PostgreSQL database (will not be displayed in console)
  # DBPassword:
  #   Type: String
  #   NoEcho: true
  #   Description: Master password for PostgreSQL database (must be 8-30 characters with letters and numbers)
  #   AllowedPattern: ^(?=.*[a-zA-Z])(?=.*\d)[a-zA-Z0-9]{8,30}$
  #   ConstraintDescription: Password must be 8-30 characters and contain at least one letter and one number

# ===================================================================================================
# Conditions - Conditional logic for resource creation (none used in this template)
# ===================================================================================================
Conditions:
  IsX64: !Equals [!Ref Architecture, x86_64]
  IsArm64: !Equals [!Ref Architecture, arm64]
  IsProd: !Equals [!Ref Environment, prod]

# ===================================================================================================
# Resources - AWS resources to be provisioned for the E2B infrastructure
# ===================================================================================================
Resources:
  # ------------------------------------------------------------------------------------------------
  # VPC and Networking - Core network infrastructure for secure communication between components
  # ------------------------------------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "vpc-${AWS::StackName}"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnet in AZ1 - Network segment with direct internet access in first availability zone
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public subnet in first availability zone for internet-facing resources
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref PublicSubnet1Block
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-1
        - Key: kubernetes.io/role/elb
          Value: "1"

  # Public Subnet in AZ2 - Network segment with direct internet access in second availability zone
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public subnet in second availability zone for internet-facing resources
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref PublicSubnet2Block
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-2
        - Key: kubernetes.io/role/elb
          Value: "1"

  # Private Subnet in AZ1 - Isolated network segment in first availability zone for backend services
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private subnet in first availability zone for secure resources
    Properties:
      AvailabilityZone: !Select
        - "0"
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref PrivateSubnet1Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-1
        - Key: kubernetes.io/role/internal-elb
          Value: "1"

  # Private Subnet in AZ2 - Isolated network segment in second availability zone for backend services
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private subnet in second availability zone for secure resources
    Properties:
      AvailabilityZone: !Select
        - "1"
        - !GetAZs
          Ref: AWS::Region
      CidrBlock: !Ref PrivateSubnet2Block
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-2
        - Key: kubernetes.io/role/internal-elb
          Value: "1"

  # Route Table for Public Subnets - Defines routing rules for internet-accessible subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-route

  # Route Table for Private Subnets - Defines routing rules for internal-only subnets
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-route

  # Default Route to Internet Gateway - Enables outbound internet access for public subnets
  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate Route Tables with Subnets - Links routing rules to appropriate network segments
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # S3 VPC Endpoint - Provides private access to S3 without traversing the public internet
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"
      VpcId: !Ref VPC
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable

  # ------------------------------------------------------------------------------------------------
  # Security Groups - Network access control for different infrastructure tiers
  # ------------------------------------------------------------------------------------------------
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group allowing SSH connections to the bastion host from specified IP ranges
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-bastion-sg"

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group controlling access to the PostgreSQL database (port 5432)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: !Ref VpcBlock
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-db-sg"

  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group controlling access to the Redis cache (port 6379)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: !Ref VpcBlock
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-redis-sg"

  # ------------------------------------------------------------------------------------------------
  # IAM - Identity and Access Management roles and policies for secure resource access
  # ------------------------------------------------------------------------------------------------
  EC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/PowerUserAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
      Description: IAM role granting EC2 instances permissions to manage E2B infrastructure resources

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2ServiceRole

  # ------------------------------------------------------------------------------------------------
  # Parameter Store - Secure storage for sensitive configuration values
  # ------------------------------------------------------------------------------------------------
  DBPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "e2b-${AWS::StackName}-db-password"
      Type: String
      Value: !Ref DBPassword
      Description: PostgreSQL database password stored securely in AWS Systems Manager Parameter Store

  # ------------------------------------------------------------------------------------------------
  # Certificate - SSL/TLS certificate for secure HTTPS communication
  # ------------------------------------------------------------------------------------------------


  # ------------------------------------------------------------------------------------------------
  # S3 Buckets - Object storage for Terraform state files and software artifacts
  # ------------------------------------------------------------------------------------------------
  TerraformS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "terraform-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Suspended
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-terraform-bucket"

  SoftwareS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "software-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Suspended
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-software-bucket"

  # ------------------------------------------------------------------------------------------------
  # RDS Database - PostgreSQL database for E2B platform data persistence
  # ------------------------------------------------------------------------------------------------
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group defining which private subnets can host the PostgreSQL database
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-postgres-subnet-group"

  # PostgreSQLCluster:
  #   Type: AWS::RDS::DBCluster
  #   Properties:
  #     Engine: postgres
  #     EngineVersion: 16.8
  #     DBClusterIdentifier:
  #       Fn::Join:
  #         - "-"
  #         - - Ref: "AWS::StackName"
  #           - "postgres-cluster"
  #     DBSubnetGroupName: !Ref DBSubnetGroup
  #     MasterUsername: !Ref DBUsername
  #     MasterUserPassword: !Ref DBPassword
  #     StorageEncrypted: true
  #     VpcSecurityGroupIds:
  #       - !GetAtt DBSecurityGroup.GroupId

  # PostgreSQLInstance:
  #   Type: AWS::RDS::DBInstance
  #   Properties:
  #     Engine: postgres
  #     EngineVersion: 16.8
  #     DBInstanceIdentifier:
  #       Fn::Join:
  #         - "-"
  #         - - Ref: "AWS::StackName"
  #           - "postgres-instance"
  #     DBClusterIdentifier: !Ref PostgreSQLCluster  # Only needed if using a cluster
  #     DBInstanceClass: db.t3.micro  # Adjust as needed
  #     PubliclyAccessible: false
  #     VpcSecurityGroupIds:
  #       - !GetAtt DBSecurityGroup.GroupId

  # ------------------------------------------------------------------------------------------------
  # ElastiCache Redis - Redis cache for E2B platform
  # ------------------------------------------------------------------------------------------------
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for Redis cache
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-redis-subnet-group"

  RedisServerless:
    Type: AWS::ElastiCache::ServerlessCache
    Properties:
      Engine: redis
      ServerlessCacheName: !Sub "${AWS::StackName}-redis"
      SecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-redis"

  # ------------------------------------------------------------------------------------------------
  # EC2 Instance - Terraform Bastion Host for infrastructure management
  # ------------------------------------------------------------------------------------------------
  BastionInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: "Terraform Bastion Host for deploying and managing E2B infrastructure components"
    Properties:
      InstanceType: !If
        - IsX64
        - t3.medium
        - t2.medium        
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SubnetId: !Ref PublicSubnet1
      SourceDestCheck: false
      EbsOptimized: true
      Monitoring: true
      ImageId: !If
        - IsX64
        - "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/amd64/hvm/ebs-gp2/ami-id}}"
        - "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}"
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 40
            VolumeType: gp3
            Encrypted: true
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-bastion"
      UserData: !Base64
        Fn::Join:
          - ""
          - - |
              #!/bin/bash -v
              set -e
            - |
              # Update system packages to latest versions
              apt update -y
            - |
              # Install Go programming language for building E2B components
              snap install go --classic
            - |
              # Install essential development and deployment tools
              apt install unzip docker.io make jq postgresql-client-common -y
            - |
              # Install PostgreSQL client for database management
              apt install postgresql-client -y
            - |
              # Setup Docker buildx for multi-architecture container builds
              mkdir -p /root/.docker/cli-plugins
            - !If
              - IsX64
              - |
                wget -O /root/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.21.1/buildx-v0.21.1.linux-amd64
                wget -O /opt/awscli.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
                wget -O /opt/packer.zip https://releases.hashicorp.com/packer/1.12.0/packer_1.12.0_linux_amd64.zip
                wget -O /opt/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
                wget -O /opt/nomad.zip https://releases.hashicorp.com/nomad/1.6.2/nomad_1.6.2_linux_amd64.zip
              - |
                wget -O /root/.docker/cli-plugins/docker-buildx https://github.com/docker/buildx/releases/download/v0.21.1/buildx-v0.21.1.linux-arm64
                wget -O /opt/awscli.zip https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip
                wget -O /opt/packer.zip https://releases.hashicorp.com/packer/1.12.0/packer_1.12.0_linux_arm64.zip
                wget -O /opt/terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_arm64.zip
                wget -O /opt/nomad.zip https://releases.hashicorp.com/nomad/1.6.2/nomad_1.6.2_linux_arm64.zip
            - |
              chmod +x /root/.docker/cli-plugins/docker-buildx
            - |
              cd /opt
            - |
              # Install AWS CLI for infrastructure management
              unzip awscli.zip && ./aws/install && rm awscli.zip
            - !Sub |
              # Configure AWS CLI default region
              aws configure set region ${AWS::Region}
            - |
              # Install HashiCorp Packer for creating machine images                
              unzip packer.zip && mv packer /usr/local/bin/packer && rm packer.zip
            - |
              # Install HashiCorp Terraform for infrastructure as code
              unzip terraform.zip && mv terraform /usr/local/bin/terraform && rm terraform.zip
            - |
              # Install HashiCorp Nomad for workload orchestration
              unzip nomad.zip && mv nomad /usr/local/bin/ && rm nomad.zip
            - |
              # Create directory for E2B infrastructure code
              mkdir -p /opt/infra/ && cd /opt/infra/
              git clone https://github.com/tamvoatqualgo/e2b.git && cd e2b
            - !Sub |
              # Initialize Configuration
              touch /tmp/e2b.log
              echo "StackName=${AWS::StackName}" >> /tmp/e2b.log
              BUILD=$(git rev-parse --short HEAD)
              echo "BUILD=$BUILD" >> /tmp/e2b.log
              while true; do
                STACK_STATUS=$(aws cloudformation describe-stacks --stack-name ${AWS::StackName} --query "Stacks[0].StackStatus" --output text)
                echo "$(date '+%Y-%m-%d %H:%M:%S') - Stack current state: $STACK_STATUS" >> /tmp/e2b.log
                case $STACK_STATUS in
                  CREATE_COMPLETE)
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute init.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    bash infra-iac/init.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute packer.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    HOME=/root bash -l infra-iac/packer/packer.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute terraform" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    bash infra-iac/terraform/start.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute init-db.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    bash infra-iac/db/init-db.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute build.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    HOME=/root bash packages/build.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute nomad.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    source nomad/nomad.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute prepare.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    bash nomad/prepare.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute deploy.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    bash nomad/deploy.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "Start to execute create_template.sh" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    bash packages/create_template.sh >> /tmp/e2b.log 2>&1
                    echo "========================================" >> /tmp/e2b.log
                    echo "E2B Deploy Done!" >> /tmp/e2b.log
                    echo "========================================" >> /tmp/e2b.log
                    break
                    ;;
                  CREATE_FAILED|ROLLBACK_COMPLETE|ROLLBACK_FAILED|UPDATE_ROLLBACK_COMPLETE|UPDATE_ROLLBACK_FAILED|DELETE_FAILED)
                    echo "exit with error cloudformation state: $STACK_STATUS" >> /tmp/e2b.log
                    exit 1
                    ;;
                  *)
                    sleep 10
                    ;;
                esac
              done

# ===================================================================================================
# Outputs - Values exported after stack creation for reference by other stacks
# ===================================================================================================
Outputs:
  # Availability Zone outputs
  CFNAZ1:
    Description: First Availability Zone used for high availability deployment
    Value: !Select
      - "0"
      - !GetAZs
        Ref: AWS::Region
    Export:
      Name: CFNAZ1

  CFNAZ2:
    Description: Second Availability Zone used for high availability deployment
    Value: !Select
      - "1"
      - !GetAZs
        Ref: AWS::Region
    Export:
      Name: CFNAZ2

  # Database outputs
  DBEndpoint:
    Description: Aurora PostgreSQL database connection endpoint address
    Value: "test.cmlcqgy8mkwq.us-east-1.rds.amazonaws.com"

  # Stack information
  CFNSTACKNAME:
    Description: CloudFormation stack name for reference in other templates
    Value: !Ref AWS::StackName
    Export:
      Name: CFNSTACKNAME

  # VPC outputs
  CFNVPCID:
    Description: VPC ID for the E2B infrastructure network
    Value: !Ref VPC
    Export:
      Name: CFNVPCID

  CFNVPCCIDR:
    Description: VPC CIDR Block defining the overall network address space
    Value: !Ref VpcBlock
    Export:
      Name: CFNVPCCIDR

  # Subnet outputs
  CFNPRIVATESUBNET1:
    Description: Private Subnet ID in first availability zone for secure resources
    Value: !Ref PrivateSubnet1
    Export:
      Name: CFNPRIVATESUBNET1

  CFNPRIVATESUBNET2:
    Description: Private Subnet ID in second availability zone for secure resources
    Value: !Ref PrivateSubnet2
    Export:
      Name: CFNPRIVATESUBNET2

  CFNPUBLICSUBNET1:
    Description: Public Subnet ID in first availability zone for internet-facing resources
    Value: !Ref PublicSubnet1
    Export:
      Name: CFNPUBLICSUBNET1

  CFNPUBLICSUBNET2:
    Description: Public Subnet ID in second availability zone for internet-facing resources
    Value: !Ref PublicSubnet2
    Export:
      Name: CFNPUBLICSUBNET2

  # S3 bucket outputs
  CFNTERRAFORMBUCKET:
    Description: S3 bucket name for storing Terraform state files
    Value: !Ref TerraformS3Bucket
    Export:
      Name: CFNTERRAFORMBUCKET

  CFNSOFTWAREBUCKET:
    Description: S3 bucket name for storing E2B software artifacts
    Value: !Ref SoftwareS3Bucket
    Export:
      Name: CFNSOFTWAREBUCKET

  # SSH key output
  CFNSSHKEY:
    Description: EC2 SSH Key Name for bastion host access
    Value: !Ref KeyName
    Export:
      Name: CFNSSHKEY

  # Database connection string
  CFNDBURL:
    Description: Complete PostgreSQL connection string for application configuration
    Value: !Sub
      - "postgresql://postgres:Helloworld7@${DBEndpoint}/postgres"
      - DBEndpoint: "test.cmlcqgy8mkwq.us-east-1.rds.amazonaws.com"
    Export:
      Name: CFNDBURL

  # Redis outputs
  REDISNAME:
    Description: Redis cache name
    Value: !Sub "${AWS::StackName}-redis"
    Export:
      Name: CFNREDISNAME

  REDISENDPOINT:
    Description: Complete Redis connection string for application configuration
    Value: !GetAtt RedisServerless.Endpoint.Address
    Export:
      Name: CFNREDISURL

  ENVIRONMENT:
    Description: E2B Environment
    Value: !Ref Environment
    Export:
      Name: CFNENVIRONMENT

  ARCHITECTURE:
    Description: E2B Cluster CPU Architecture
    Value: !Ref Architecture
    Export:
      Name: CFNARCHITECTURE

  REGION:
    Description: E2B Cluster Deployment Region
    Value: !Ref AWS::Region
    Export:
      Name: AWSREGION

  STACKNAME:
    Description: CloudFormation Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: AWSSTACKNAME

  # Bastion Host information
  BASTIONPUBLICDNS:
    Description: Public DNS name of the Bastion Host for SSH access
    Value: !GetAtt BastionInstance.PublicDnsName

  BASTIONPUBLICIP:
    Description: Public IP address of the Bastion Host for SSH access
    Value: !GetAtt BastionInstance.PublicIp
